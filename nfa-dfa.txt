// C Program to illustrate how to convert e-nfa to DFA 

#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#define MAX_LEN 100 

char NFA_FILE[MAX_LEN]; 
char buffer[MAX_LEN]; 
int zz = 0; 

// Structure to store DFA states and their 
// status ( i.e new entry or already present) 
struct DFA { 
char *states; 
int count; 
} dfa; 

int last_index = 0; 
FILE *fp; 
int symbols; 

/* reset the hash map*/
void reset(int ar[], int size) { 
int i; 

// reset all the values of 
// the mapping array to zero 
for (i = 0; i < size; i++) { 
	ar[i] = 0; 
} 
} 

// Check which States are present in the e-closure 

/* map the states of NFA to a hash set*/
void check(int ar[], char S[]) { 
int i, j; 

// To parse the individual states of NFA 
int len = strlen(S); 
for (i = 0; i < len; i++) { 

	// Set hash map for the position 
	// of the states which is found 
	j = ((int)(S[i]) - 65); 
	ar[j]++; 
} 
} 

// To find new Closure States 
void state(int ar[], int size, char S[]) { 
int j, k = 0; 

// Combine multiple states of NFA 
// to create new states of DFA 
for (j = 0; j < size; j++) { 
	if (ar[j] != 0) 
	S[k++] = (char)(65 + j); 
} 

// mark the end of the state 
S[k] = '\0'; 
} 

// To pick the next closure from closure set 
int closure(int ar[], int size) { 
int i; 

// check new closure is present or not 
for (i = 0; i < size; i++) { 
	if (ar[i] == 1) 
	return i; 
} 
return (100); 
} 

// Check new DFA states can be 
// entered in DFA table or not 
int indexing(struct DFA *dfa) { 
int i; 

for (i = 0; i < last_index; i++) { 
	if (dfa[i].count == 0) 
	return 1; 
} 
return -1; 
} 

/* To Display epsilon closure*/
void Display_closure(int states, int closure_ar[], 
					char *closure_table[], 
					char *NFA_TABLE[][symbols + 1], 
					char *DFA_TABLE[][symbols]) { 
int i; 
for (i = 0; i < states; i++) { 
	reset(closure_ar, states); 
	closure_ar[i] = 2; 

	// to neglect blank entry 
	if (strcmp(&NFA_TABLE[i][symbols], "-") != 0) { 

	// copy the NFA transition state to buffer 
	strcpy(buffer, &NFA_TABLE[i][symbols]); 
	check(closure_ar, buffer); 
	int z = closure(closure_ar, states); 

	// till closure get completely saturated 
	while (z != 100) 
	{ 
		if (strcmp(&NFA_TABLE[z][symbols], "-") != 0) { 
		strcpy(buffer, &NFA_TABLE[z][symbols]); 

		// call the check function 
		check(closure_ar, buffer); 
		} 
		closure_ar[z]++; 
		z = closure(closure_ar, states); 
	} 
	} 

	// print the e closure for every states of NFA 
	printf("\n e-Closure (%c) :\t", (char)(65 + i)); 

	bzero((void *)buffer, MAX_LEN); 
	state(closure_ar, states, buffer); 
	strcpy(&closure_table[i], buffer); 
	printf("%s\n", &closure_table[i]); 
} 
} 

/* To check New States in DFA */
int new_states(struct DFA *dfa, char S[]) { 

int i; 

// To check the current state is already 
// being used as a DFA state or not in 
// DFA transition table 
for (i = 0; i < last_index; i++) { 
	if (strcmp(&dfa[i].states, S) == 0) 
	return 0; 
} 

// push the new 
strcpy(&dfa[last_index++].states, S); 

// set the count for new states entered 
// to zero 
dfa[last_index - 1].count = 0; 
return 1; 
} 

// Transition function from NFA to DFA 
// (generally union of closure operation ) 
void trans(char S[], int M, char *clsr_t[], int st, 
			char *NFT[][symbols + 1], char TB[]) { 
int len = strlen(S); 
int i, j, k, g; 
int arr[st]; 
int sz; 
reset(arr, st); 
char temp[MAX_LEN], temp2[MAX_LEN]; 
char *buff; 

// Transition function from NFA to DFA 
for (i = 0; i < len; i++) { 

	j = ((int)(S[i] - 65)); 
	strcpy(temp, &NFT[j][M]); 

	if (strcmp(temp, "-") != 0) { 
	sz = strlen(temp); 
	g = 0; 

	while (g < sz) { 
		k = ((int)(temp[g] - 65)); 
		strcpy(temp2, &clsr_t[k]); 
		check(arr, temp2); 
		g++; 
	} 
	} 
} 

bzero((void *)temp, MAX_LEN); 
state(arr, st, temp); 
if (temp[0] != '\0') { 
	strcpy(TB, temp); 
} else
	strcpy(TB, "-"); 
} 

/* Display DFA transition state table*/
void Display_DFA(int last_index, struct DFA *dfa_states, 
				char *DFA_TABLE[][symbols]) { 
int i, j; 
printf("\n\n********************************************************\n\n"); 
printf("\t\t DFA TRANSITION STATE TABLE \t\t \n\n"); 
printf("\n STATES OF DFA :\t\t"); 

for (i = 1; i < last_index; i++) 
	printf("%s, ", &dfa_states[i].states); 
printf("\n"); 
printf("\n GIVEN SYMBOLS FOR DFA: \t"); 

for (i = 0; i < symbols; i++) 
	printf("%d, ", i); 
printf("\n\n"); 
printf("STATES\t"); 

for (i = 0; i < symbols; i++) 
	printf("|%d\t", i); 
printf("\n"); 

// display the DFA transition state table 
printf("--------+-----------------------\n"); 
for (i = 0; i < zz; i++) { 
	printf("%s\t", &dfa_states[i + 1].states); 
	for (j = 0; j < symbols; j++) { 
	printf("|%s \t", &DFA_TABLE[i][j]); 
	} 
	printf("\n"); 
} 
} 

// Driver Code 
int main() { 
int i, j, states; 
char T_buf[MAX_LEN]; 

// creating an array dfa structures 
struct DFA *dfa_states = malloc(MAX_LEN * (sizeof(dfa))); 
states = 6, symbols = 2; 

printf("\n STATES OF NFA :\t\t"); 
for (i = 0; i < states; i++) 

	printf("%c, ", (char)(65 + i)); 
printf("\n"); 
printf("\n GIVEN SYMBOLS FOR NFA: \t"); 

for (i = 0; i < symbols; i++) 

	printf("%d, ", i); 
printf("eps"); 
printf("\n\n"); 
char *NFA_TABLE[states][symbols + 1]; 

// Hard coded input for NFA table 
char *DFA_TABLE[MAX_LEN][symbols]; 
strcpy(&NFA_TABLE[0][0], "FC"); 
strcpy(&NFA_TABLE[0][1], "-"); 
strcpy(&NFA_TABLE[0][2], "BF"); 
strcpy(&NFA_TABLE[1][0], "-"); 
strcpy(&NFA_TABLE[1][1], "C"); 
strcpy(&NFA_TABLE[1][2], "-"); 
strcpy(&NFA_TABLE[2][0], "-"); 
strcpy(&NFA_TABLE[2][1], "-"); 
strcpy(&NFA_TABLE[2][2], "D"); 
strcpy(&NFA_TABLE[3][0], "E"); 
strcpy(&NFA_TABLE[3][1], "A"); 
strcpy(&NFA_TABLE[3][2], "-"); 
strcpy(&NFA_TABLE[4][0], "A"); 
strcpy(&NFA_TABLE[4][1], "-"); 
strcpy(&NFA_TABLE[4][2], "BF"); 
strcpy(&NFA_TABLE[5][0], "-"); 
strcpy(&NFA_TABLE[5][1], "-"); 
strcpy(&NFA_TABLE[5][2], "-"); 
printf("\n NFA STATE TRANSITION TABLE \n\n\n"); 
printf("STATES\t"); 

for (i = 0; i < symbols; i++) 
	printf("|%d\t", i); 
printf("eps\n"); 

// Displaying the matrix of NFA transition table 
printf("--------+------------------------------------\n"); 
for (i = 0; i < states; i++) { 
	printf("%c\t", (char)(65 + i)); 

	for (j = 0; j <= symbols; j++) { 
	printf("|%s \t", &NFA_TABLE[i][j]); 
	} 
	printf("\n"); 
} 
int closure_ar[states]; 
char *closure_table[states]; 

Display_closure(states, closure_ar, closure_table, NFA_TABLE, DFA_TABLE); 
strcpy(&dfa_states[last_index++].states, "-"); 

dfa_states[last_index - 1].count = 1; 
bzero((void *)buffer, MAX_LEN); 

strcpy(buffer, &closure_table[0]); 
strcpy(&dfa_states[last_index++].states, buffer); 

int Sm = 1, ind = 1; 
int start_index = 1; 

// Filling up the DFA table with transition values 
// Till new states can be entered in DFA table 
while (ind != -1) { 
	dfa_states[start_index].count = 1; 
	Sm = 0; 
	for (i = 0; i < symbols; i++) { 

	trans(buffer, i, closure_table, states, NFA_TABLE, T_buf); 

	// storing the new DFA state in buffer 
	strcpy(&DFA_TABLE[zz][i], T_buf); 

	// parameter to control new states 
	Sm = Sm + new_states(dfa_states, T_buf); 
	} 
	ind = indexing(dfa_states); 
	if (ind != -1) 
	strcpy(buffer, &dfa_states[++start_index].states); 
	zz++; 
} 
// display the DFA TABLE 
Display_DFA(last_index, dfa_states, DFA_TABLE); 

return 0; 
} 
***********************************************************************************************


#include <stdio.h>
#include <string.h>

#define STATES	99
#define SYMBOLS	20

int N_symbols;	/* number of input symbols */
int N_NFA_states;	/* number of NFA states */
char *NFAtab[STATES][SYMBOLS];
char *NFA_finals;	/* NFA final states */

int N_DFA_states;	/* number of DFA states */
int DFAtab[STATES][SYMBOLS];
char DFA_finals[STATES+1];	/* NFA final states */

char StateName[STATES][STATES+1];	/* state name table */
char Eclosure[STATES][STATES+1];	/* epsilon closure for each state */

/*
	Print state-transition table.
	State names: 'A', 'B', 'C', ...
*/
void print_nfa_table(
	char *tab[][SYMBOLS],	/* DFA table */
	int nstates,	/* number of states */
	int nsymbols,	/* number of input symbols */
	char *finals)	/* final states */
{
	int i, j;

	puts("\nNFA: STATE TRANSITION TABLE");

	/* input symbols: '0', '1', ... */
	printf("     | ");
	for (i = 0; i < nsymbols; i++) printf("  %-6c", '0'+i);
	printf("  e\n");	/* epsilon */

	printf("-----+--");
	for (i = 0; i < nsymbols+1; i++) printf("-------");
	printf("\n");

	for (i = 0; i < nstates; i++) {
		printf("  %c  | ", '0'+i);	/* state */
		for (j = 0; j < nsymbols+1; j++)
			printf("  %-6s", tab[i][j]);
		printf("\n");
	}
	printf("Final states = %s\n", finals);
}

/*
	Print state-transition table.
	State names: 'A', 'B', 'C', ...
*/
void print_dfa_table(
	int tab[][SYMBOLS],	/* DFA table */
	int nstates,	/* number of states */
	int nsymbols,	/* number of input symbols */
	char *finals)	/* final states */
{
	int i, j;

	puts("\nDFA: STATE TRANSITION TABLE");

	/* input symbols: '0', '1', ... */
	printf("     | ");
	for (i = 0; i < nsymbols; i++) printf("  %c  ", '0'+i);

	printf("\n-----+--");
	for (i = 0; i < nsymbols; i++) printf("-----");
	printf("\n");

	for (i = 0; i < nstates; i++) {
		printf("  %c  | ", 'A'+i);	/* state */
		for (j = 0; j < nsymbols; j++)
			printf("  %c  ", tab[i][j]);
		printf("\n");
	}
	printf("Final states = %s\n", finals);
}

/*
	Initialize NFA table.
*/
void load_NFA_table()
{
/*
	epsilon-NFA table for ex.24 at p.82
	Last input symbol is an epsilon.
	Input symbols : 0(a), 1(b), 2(epsilon)

	NFAtab[0][0] = "0";
	NFAtab[0][1] = "";
	NFAtab[0][2] = "13";
	NFAtab[1][0] = "2";
	NFAtab[1][1] = "";
	NFAtab[1][2] = "";
	NFAtab[2][0] = "";
	NFAtab[2][1] = "2";
	NFAtab[2][2] = "3";
	NFAtab[3][0] = "3";
	NFAtab[3][1] = "";
	NFAtab[3][2] = "";

	N_symbols = 2;
	N_NFA_states = 4;
	NFA_finals = "3";
	N_DFA_states = 0;
*/

/*
	epsilon-NFA table for ex.25 at p.82-83
	Last input symbol is an epsilon.
	Input symbols : 0(a), 1(b), 2(epsilon)
*/
	NFAtab[0][0] = "1";
	NFAtab[0][1] = "";
	NFAtab[0][2] = "";
	NFAtab[0][3] = "2";
	NFAtab[1][0] = "";
	NFAtab[1][1] = "3";
	NFAtab[1][2] = "";
	NFAtab[1][3] = "";
	NFAtab[2][0] = "";
	NFAtab[2][1] = "";
	NFAtab[2][2] = "2";
	NFAtab[2][3] = "3";
	NFAtab[3][0] = "";
	NFAtab[3][1] = "";
	NFAtab[3][2] = "";
	NFAtab[3][3] = "";

	N_symbols = 3;
	N_NFA_states = 4;
	NFA_finals = "3";
	N_DFA_states = 0;
}

/*
	String 't' is merged into 's' in an alphabetical order.

	Return value: number of items that are added to 's'.
*/
int string_merge(char *s, char *t)
{
	int n=0;
	char temp[STATES+1], *r=temp, *p=s;

	while (*p && *t) {
		if (*p == *t) {
			*r++ = *p++; t++;
		} else if (*p < *t) {
			*r++ = *p++;
		} else {
			*r++ = *t++;
			n++;	/* an item is added to 's' */
		}
	}
	*r = '\0';

	if (*t) {
		strcat(r, t);
		n += strlen(t);
	} else if (*p) strcat(r, p);

	strcpy(s, temp);

	return n;
}

/*
	Get next-state string for current-state string.
	(state 스트링이므로 각 state에 대해 nextstate를 merge)
*/
void get_next_state_NFA(char *nextstates, char *cur_states,
	char *nfa[STATES][SYMBOLS], int symbol)
{
	int i;
	char temp[STATES+1];

	temp[0] = '\0';
	for (i = 0; i < strlen(cur_states); i++)
		string_merge(temp, nfa[cur_states[i]-'0'][symbol]);
	strcpy(nextstates, temp);
}

/*
	StateName 테이블 'stnt'에서 'state'를 찾아 index를 return.
	'state'가 테이블에 없으면 끝에 추가하고 index를 return.
*/
int state_index(char *state, char stnt[][STATES+1], int *pn)
{
	int i;

	if (!*state) return -1;	/* no next state */

	for (i = 0; i < *pn; i++)
		if (!strcmp(state, stnt[i])) return i;

	strcpy(stnt[i], state);	/* new state-name */
	return (*pn)++;
}

/*
	'epstates': epsilon-accessible states for 'state'.
*/
void get_ep_states(int state, char *epstates,
	char *nfa[][SYMBOLS], int n_sym)
{
	int i, n=0;	/* 'n': number of added states */

	/* directly epsilon-accessible states */
	strcpy(epstates, nfa[state][n_sym]);

	do {	/* get all indirectly epsilon-accessible states */
		for (i = 0; i < strlen(epstates); i++)
			n = string_merge(epstates, nfa[epstates[i]-'0'][n_sym]);
	} while (n);	/* 더 이상 추가되는 state가 없을 때까지 */
}

/*
	Initialize 'Eclosure[]' for each NFA state.
	<주의> 'Eclosure[i]'에 자기 state는 제외하였음!
*/
void init_Eclosure(char eclosure[][STATES+1],
	char *nfa[][SYMBOLS], int n_nfa, int n_sym)
{
	int i;

	printf("\nEpsilon-accessible states:\n");
	for (i = 0; i < n_nfa; i++) {
		get_ep_states(i, eclosure[i], nfa, n_sym);
		printf("    state %d : [%s]\n", i, eclosure[i]);
	} printf("\n");
}

/*
	Epsilon closure of 'states' is 'epstates'.
*/
void e_closure(char *epstates, char *states, char eclosure[][STATES+1])
{
	int i;

	strcpy(epstates, states);
	for (i = 0; i < strlen(states); i++)
		string_merge(epstates, eclosure[states[i]-'0']);
}

/*
	Convert NFA table to DFA table.
	Method:
		0. state-name이 스트링이므로 StateName 테이블 이용
		   'n' -- StateName[]에 등록된 state 개수
		1. DFA table의 entry 개수를 1로 초기화 및 StateName에 추가
		2. StateName[i]의 각 symbol들에 대해 nextstate 계산
		3. nextstate가 스트링이므로 StateName의 index를 DFA에 넣음
	Return value: number of DFA states.
*/
int nfa_to_dfa(char *nfa[][SYMBOLS], int n_nfa,
	int n_sym, int dfa[][SYMBOLS])
{
	int i = 0;	/* current index of DFA */
	int n = 1;	/* number of DFA states */

	char nextstate[STATES+1];
	char temp[STATES+1];	/* epsilon closure */
	int j;

	init_Eclosure(Eclosure, nfa, n_nfa, n_sym);

	e_closure(temp, "0", Eclosure);
	strcpy(StateName[0], temp);	/* initialize start state */

	printf("Epsilon-NFA to DFA conversion\n");
	for (i = 0; i < n; i++) {	/* for each DFA state */
		for (j = 0; j < n_sym; j++) {	/* for each input symbol */
			get_next_state_NFA(nextstate, StateName[i], nfa, j);
			e_closure(temp, nextstate, Eclosure);
			dfa[i][j] = state_index(temp, StateName, &n);
			printf("    state %d(%4s) : %d --> state %2d(%4s)\n",
				i, StateName[i], j, dfa[i][j], temp);
			dfa[i][j] += 'A';	/* 0/1/2/... --> 'A/B/C/...' */
		}
	}

	return n;	/* number of DFA states */
}

/*
	NFA의 final state가 하나라도 포함된 모든 state가 DFA의 final state임.
*/
void get_DFA_finals(
	char *dfinals,	/* DFA final states */
	char *nfinals,	/* NFA final states */
	char stnt[][STATES+1],	/* state-name table */
	int n_dfa)	/* number of DFA states */
{
	int i, j, k=0, n=strlen(nfinals);

	for (i = 0; i < n_dfa; i++) {
		for (j = 0; j < n; j++) {
			if (strchr(stnt[i], nfinals[j])) {
				dfinals[k++] = i+'A';
				break;
			}
		}
	}
	dfinals[k] = '\0';
}

void main()
{
	load_NFA_table();
	print_nfa_table(NFAtab, N_NFA_states, N_symbols, NFA_finals);

	N_DFA_states = nfa_to_dfa(NFAtab, N_NFA_states, N_symbols, DFAtab);
	get_DFA_finals(DFA_finals, NFA_finals, StateName, N_DFA_states);

	print_dfa_table(DFAtab, N_DFA_states, N_symbols, DFA_finals);
}
