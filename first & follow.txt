GEEKS



// C program to calculate the First and 
// Follow sets of a given grammar 
#include<stdio.h> 
#include<ctype.h> 
#include<string.h> 

// Functions to calculate Follow 
void followfirst(char, int, int); 
void follow(char c); 

// Function to calculate First 
void findfirst(char, int, int); 

int count, n = 0; 

// Stores the final result 
// of the First Sets 
char calc_first[10][100]; 

// Stores the final result 
// of the Follow Sets 
char calc_follow[10][100]; 
int m = 0; 

// Stores the production rules 
char production[10][10]; 
char f[10], first[10]; 
int k; 
char ck; 
int e; 

int main(int argc, char **argv) 
{ 
	int jm = 0; 
	int km = 0; 
	int i, choice; 
	char c, ch; 
	count = 8; 
	
	// The Input grammar 
	strcpy(production[0], "E=TR"); 
	strcpy(production[1], "R=+TR"); 
	strcpy(production[2], "R=#"); 
	strcpy(production[3], "T=FY"); 
	strcpy(production[4], "Y=*FY"); 
	strcpy(production[5], "Y=#"); 
	strcpy(production[6], "F=(E)"); 
	strcpy(production[7], "F=i"); 
	
	int kay; 
	char done[count]; 
	int ptr = -1; 
	
	// Initializing the calc_first array 
	for(k = 0; k < count; k++) { 
		for(kay = 0; kay < 100; kay++) { 
			calc_first[k][kay] = '!'; 
		} 
	} 
	int point1 = 0, point2, xxx; 
	
	for(k = 0; k < count; k++) 
	{ 
		c = production[k][0]; 
		point2 = 0; 
		xxx = 0; 
		
		// Checking if First of c has 
		// already been calculated 
		for(kay = 0; kay <= ptr; kay++) 
			if(c == done[kay]) 
				xxx = 1; 
				
		if (xxx == 1) 
			continue; 
		
		// Function call	 
		findfirst(c, 0, 0); 
		ptr += 1; 
		
		// Adding c to the calculated list 
		done[ptr] = c; 
		printf("\n First(%c) = { ", c); 
		calc_first[point1][point2++] = c; 
		
		// Printing the First Sets of the grammar 
		for(i = 0 + jm; i < n; i++) { 
			int lark = 0, chk = 0; 
			
			for(lark = 0; lark < point2; lark++) { 
				
				if (first[i] == calc_first[point1][lark]) 
				{ 
					chk = 1; 
					break; 
				} 
			} 
			if(chk == 0) 
			{ 
				printf("%c, ", first[i]); 
				calc_first[point1][point2++] = first[i]; 
			} 
		} 
		printf("}\n"); 
		jm = n; 
		point1++; 
	} 
	printf("\n"); 
	printf("-----------------------------------------------\n\n"); 
	char donee[count]; 
	ptr = -1; 
	
	// Initializing the calc_follow array 
	for(k = 0; k < count; k++) { 
		for(kay = 0; kay < 100; kay++) { 
			calc_follow[k][kay] = '!'; 
		} 
	} 
	point1 = 0; 
	int land = 0; 
	for(e = 0; e < count; e++) 
	{ 
		ck = production[e][0]; 
		point2 = 0; 
		xxx = 0; 
		
		// Checking if Follow of ck 
		// has alredy been calculated 
		for(kay = 0; kay <= ptr; kay++) 
			if(ck == donee[kay]) 
				xxx = 1; 
				
		if (xxx == 1) 
			continue; 
		land += 1; 
		
		// Function call 
		follow(ck); 
		ptr += 1; 
		
		// Adding ck to the calculated list 
		donee[ptr] = ck; 
		printf(" Follow(%c) = { ", ck); 
		calc_follow[point1][point2++] = ck; 
		
		// Printing the Follow Sets of the grammar 
		for(i = 0 + km; i < m; i++) { 
			int lark = 0, chk = 0; 
			for(lark = 0; lark < point2; lark++) 
			{ 
				if (f[i] == calc_follow[point1][lark]) 
				{ 
					chk = 1; 
					break; 
				} 
			} 
			if(chk == 0) 
			{ 
				printf("%c, ", f[i]); 
				calc_follow[point1][point2++] = f[i]; 
			} 
		} 
		printf(" }\n\n"); 
		km = m; 
		point1++; 
	} 
} 

void follow(char c) 
{ 
	int i, j; 
	
	// Adding "$" to the follow 
	// set of the start symbol 
	if(production[0][0] == c) { 
		f[m++] = '$'; 
	} 
	for(i = 0; i < 10; i++) 
	{ 
		for(j = 2;j < 10; j++) 
		{ 
			if(production[i][j] == c) 
			{ 
				if(production[i][j+1] != '\0') 
				{ 
					// Calculate the first of the next 
					// Non-Terminal in the production 
					followfirst(production[i][j+1], i, (j+2)); 
				} 
				
				if(production[i][j+1]=='\0' && c!=production[i][0]) 
				{ 
					// Calculate the follow of the Non-Terminal 
					// in the L.H.S. of the production 
					follow(production[i][0]); 
				} 
			} 
		} 
	} 
} 

void findfirst(char c, int q1, int q2) 
{ 
	int j; 
	
	// The case where we 
	// encounter a Terminal 
	if(!(isupper(c))) { 
		first[n++] = c; 
	} 
	for(j = 0; j < count; j++) 
	{ 
		if(production[j][0] == c) 
		{ 
			if(production[j][2] == '#') 
			{ 
				if(production[q1][q2] == '\0') 
					first[n++] = '#'; 
				else if(production[q1][q2] != '\0'
						&& (q1 != 0 || q2 != 0)) 
				{ 
					// Recursion to calculate First of New 
					// Non-Terminal we encounter after epsilon 
					findfirst(production[q1][q2], q1, (q2+1)); 
				} 
				else
					first[n++] = '#'; 
			} 
			else if(!isupper(production[j][2])) 
			{ 
				first[n++] = production[j][2]; 
			} 
			else
			{ 
				// Recursion to calculate First of 
				// New Non-Terminal we encounter 
				// at the beginning 
				findfirst(production[j][2], j, 3); 
			} 
		} 
	} 
} 

void followfirst(char c, int c1, int c2) 
{ 
	int k; 
	
	// The case where we encounter 
	// a Terminal 
	if(!(isupper(c))) 
		f[m++] = c; 
	else
	{ 
		int i = 0, j = 1; 
		for(i = 0; i < count; i++) 
		{ 
			if(calc_first[i][0] == c) 
				break; 
		} 
		
		//Including the First set of the 
		// Non-Terminal in the Follow of 
		// the original query 
		while(calc_first[i][j] != '!') 
		{ 
			if(calc_first[i][j] != '#') 
			{ 
				f[m++] = calc_first[i][j]; 
			} 
			else
			{ 
				if(production[c1][c2] == '\0') 
				{ 
					// Case where we reach the 
					// end of a production 
					follow(production[c1][0]); 
				} 
				else
				{ 
					// Recursion to the next symbol 
					// in case we encounter a "#" 
					followfirst(production[c1][c2], c1, c2+1); 
				} 
			} 
			j++; 
		} 
	} 
} 








*************************************************************************************************************************************************************************





#include<stdio.h>
#include<math.h>
#include<string.h>
#include<ctype.h>
#include<stdlib.h>
int n,m=0,p,i=0,j=0;
char a[10][10],f[10];
void follow(char c);
void first(char c);
int main(){


int i,z;
char c,ch;
//clrscr();
printf("Enter the no of prooductions:\n");
scanf("%d",&n);
printf("Enter the productions:\n");
for(i=0;i<n;i++)
scanf("%s%c",a[i],&ch);
do{
m=0;
printf("Enter the elemets whose fisrt & follow is to be found:");
scanf("%c",&c);
first(c);
printf("First(%c)={",c);
for(i=0;i<m;i++)
printf("%c",f[i]);
printf("}\n");
strcpy(f," ");
//flushall();
m=0;
follow(c);
printf("Follow(%c)={",c);
for(i=0;i<m;i++)
printf("%c",f[i]);
printf("}\n");
printf("Continue(0/1)?");
scanf("%d%c",&z,&ch);
}while(z==1);
return(0);
}
void first(char c)
{
int k;
if(!isupper(c))
f[m++]=c;
for(k=0;k<n;k++)
{
if(a[k][0]==c)
{
if(a[k][2]=='$')
follow(a[k][0]);
else if(islower(a[k][2]))
f[m++]=a[k][2];
else first(a[k][2]);
}
}
}
void follow(char c)
{
if(a[0][0]==c)
f[m++]='$';
for(i=0;i<n;i++)
{
for(j=2;j<strlen(a[i]);j++)
{
if(a[i][j]==c)
{
if(a[i][j+1]!='\0')
first(a[i][j+1]);
if(a[i][j+1]=='\0' && c!=a[i][0])
follow(a[i][0]);
}
}
}
}
/* OUTPUT:
Enter the no of prooductions:
5
Enter the productions:
S=AbCd
A=Cf
A=a
C=gE
E=h
Enter the elemets whose fisrt & follow is to be found:S
First(S)={ga}
Follow(S)={$}
Continue(0/1)?1
Enter the elemets whose fisrt & follow is to be found:A
First(A)={ga}
Follow(A)={b}
Continue(0/1)?1
Enter the elemets whose fisrt & follow is to be found:C
First(C)={g}
Follow(C)={df}
Continue(0/1)?1
Enter the elemets whose fisrt & follow is to be found:E
First(E)={h}
Follow(E)={df}
Continue(0/1)?0
*/








**********************************************************************************************************************************************************************************************





FOLLOW



#include<stdio.h> 
#include<ctype.h>
#include<string.h>
 
int limit, x = 0;
char production[10][10], array[10];
 
void find_first(char ch);
void find_follow(char ch);
void Array_Manipulation(char ch);
 
int main()
{
      int count;
      char option, ch;
      printf("\nEnter Total Number of Productions:\t");
      scanf("%d", &limit);
      for(count = 0; count < limit; count++)
      {
            printf("\nValue of Production Number [%d]:\t", count + 1);
            scanf("%s", production[count]);
      }
      do
      {
            x = 0;
            printf("\nEnter production Value to Find Follow:\t");
            scanf(" %c", &ch);
            find_follow(ch);
            printf("\nFollow Value of %c:\t{ ", ch);
            for(count = 0; count < x; count++)
            {
                  printf("%c ", array[count]);
            }
            printf("}\n");
            printf("To Continue, Press Y:\t");
            scanf(" %c", &option);
      }while(option == 'y' || option == 'Y');
      return 0;
}
 
void find_follow(char ch)
{
      int i, j;
      int length = strlen(production[i]);
      if(production[0][0] == ch)
      {
            Array_Manipulation('$');
      }
      for(i = 0; i < limit; i++)
      {
            for(j = 2; j < length; j++)
            {
                  if(production[i][j] == ch)
                  {
                        if(production[i][j + 1] != '\0')
                        {
                              find_first(production[i][j + 1]);
                        }
                        if(production[i][j + 1] == '\0' && ch != production[i][0])
                        {     
                              find_follow(production[i][0]);
                        }
                  }
            }
      }
}
 
void find_first(char ch)
{
      int i, k;
      if(!(isupper(ch)))
      {
            Array_Manipulation(ch);
      }
      for(k = 0; k < limit; k++)
      {
            if(production[k][0] == ch)
            {
                  if(production[k][2] == '$') 
                  {
                        find_follow(production[i][0]);
                  }
                  else if(islower(production[k][2]))
                  {
                        Array_Manipulation(production[k][2]);
                  }
                  else 
                  {
                        find_first(production[k][2]);
                  }
            }
      }
}
 
void Array_Manipulation(char ch)
{
      int count;
      for(count = 0; count <= x; count++)
      {
            if(array[count] == ch)
            {
                  return;
            }
      }
      array[x++] = ch;
}




FIRST



#include<stdio.h>
#include<ctype.h>
 
void Find_First(char[], char);
void Array_Manipulation(char[], char);
 
int limit;
char production[25][25];
 
int main()
{
      char option; 
      char ch;
      char array[25];
      int count;
      printf("\nEnter Total Number of Productions:\t");
      scanf("%d", &limit);
      for(count = 0; count < limit; count++)
      {
            printf("\nValue of Production Number [%d]:\t", count + 1);
            scanf("%s", production[count]);
      }
      do
      {
            printf("\nEnter a Value to Find First:\t");
            scanf(" %c", &ch);
            Find_First(array, ch);
            printf("\nFirst Value of %c:\t{ ", ch);
            for(count = 0; array[count] != '\0'; count++)
            {        
                  printf(" %c ", array[count]);
            }
            printf("}\n");
            printf("To Continue, Press Y:\t");
            scanf(" %c", &option);
      }while(option == 'y' || option == 'Y');
      return 0;
}
 
void Find_First(char* array, char ch)
{
      int count, j, k;
      char temporary_result[20];
      int x;
      temporary_result[0] = '\0';
      array[0] = '\0';
      if(!(isupper(ch)))
      {
            Array_Manipulation(array, ch);
            return ;
      }
      for(count = 0; count < limit; count++)
      {
            if(production[count][0] == ch)
            {
                  if(production[count][2] == '$') 
                  {
                        Array_Manipulation(array, '$');
                  }
                  else
                  {
                        j = 2;
                        while(production[count][j] != '\0')
                        {
                              x = 0;
                              Find_First(temporary_result, production[count][j]);
                              for(k = 0; temporary_result[k] != '\0'; k++)
                              {
                                    Array_Manipulation(array,temporary_result[k]);
                              }
                              for(k = 0; temporary_result[k] != '\0'; k++)
                              {
                                    if(temporary_result[k] == '$')
                                    {
                                          x = 1;
                                          break;
                                    }
                              }
                              if(!x)
                              {
                                    break;
                              }
                              j++;
                        }
                  }     
            }
      }
      return;
}
 
void Array_Manipulation(char array[], char value)
{
      int temp;
      for(temp = 0; array[temp] != '\0'; temp++)
      {
            if(array[temp] == value)
            {
                  return;
            }
      }
      array[temp] = value;
      array[temp + 1] = '\0';
}